#이것이_코딩_테스트다
#경쟁적_전염

n, k = map(int, input().split())
graph = [list(map(int, input().split())) for _ in range(n)]
s, x, y = map(int, input().split())

virus_finder = [[]]
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

def virus_find(virus_kind): #그래프에서 바이러스 k 위치 찾아서 저장
    global graph
    for i in range(n):
        for j in range(n):
            if graph[i][j] == virus_kind:
                virus_finder.append([k_find, i, j])

for k_find in range(1, k+1):
    virus_find(k_find)



def virus(x, y, k): #바이러스 상하좌우로 퍼트리기
    global graph
    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]
        if nx >= 0 and nx < n and ny >= 0 and ny < n and graph[nx][ny] == 0:
            graph[nx][ny] = k
            virus_finder[k][1] = nx #바이러스 k의 위치 업데이트
            virus_finder[k][2] = ny

for second in range(1, s+1):
    for v in range(1, k+1):
        virus(virus_finder[v][1], virus_finder[v][2], v)

print(graph[x-1][y-1])


#답안
from collections import deque

n, k = map(int, input().split())

graph = [] #전체 보드 정보를 담는 리스트
data = [] #바이러스에 대한 정보를 담는 리스트

for i in range(n):
    graph.append(list(map(int, input().split())))
    for j in range(n):
        #해당 위치에 바이러스가 존재하는 경우
        if graph[i][j] != 0:
            #(바이러스 종류, 시간, 위치x, 위치y) 삽입
            data.append((graph[i][j], 0, i, j))

#정렬 이후에 큐로 옮기기(낮은 번호의 바이러스가 먼저 증식하도록)
data.sort()
q = deque(data)

target_s, target_x, target_y = map(int, input().split())

dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

#bfs 진행
while q:
    virus, s, x, y = q.popleft()
    if s == target_s:
        break
    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]
        if nx >= 0 and nx < n and ny >= 0 and ny < n:
            if graph[nx][ny] == 0:
                graph[nx][ny] = virus
                q.append((virus, s+1, nx, ny))

print(graph[target_x - 1][target_y - 1])
